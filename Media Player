1. Permissions (AndroidManifest.xml)
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>

2. Dependencies (in build.gradle)
No external libraries are strictly needed, but you can add:
implementation 'androidx.recyclerview:recyclerview:1.3.1'
Main Features
MediaPlayer API to play audio
File access using MediaStore or File API
Simple UI with buttons (Play, Pause, Next, Previous)

Sample Code
activity_main.xml
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="20dp">

    <TextView
        android:id="@+id/songTitle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="No song selected"
        android:textSize="18sp"
        android:padding="10dp"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center">

        <Button android:id="@+id/prevBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="<<"/>

        <Button android:id="@+id/playBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Play"/>

        <Button android:id="@+id/pauseBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Pause"/>

        <Button android:id="@+id/nextBtn"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text=">>"/>
    </LinearLayout>
</LinearLayout>
MainActivity.java
java
Copy
Edit
public class MainActivity extends AppCompatActivity {

    Button playBtn, pauseBtn, nextBtn, prevBtn;
    TextView songTitle;
    MediaPlayer mediaPlayer;
    int currentSongIndex = 0;
    ArrayList<File> songs;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        playBtn = findViewById(R.id.playBtn);
        pauseBtn = findViewById(R.id.pauseBtn);
        nextBtn = findViewById(R.id.nextBtn);
        prevBtn = findViewById(R.id.prevBtn);
        songTitle = findViewById(R.id.songTitle);

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        } else {
            loadSongs();
        }

        playBtn.setOnClickListener(v -> playSong());
        pauseBtn.setOnClickListener(v -> {
            if (mediaPlayer != null && mediaPlayer.isPlaying()) mediaPlayer.pause();
        });

        nextBtn.setOnClickListener(v -> skipSong(1));
        prevBtn.setOnClickListener(v -> skipSong(-1));
    }

    void loadSongs() {
        File musicDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);
        songs = new ArrayList<>();

        if (musicDir.exists() && musicDir.isDirectory()) {
            File[] files = musicDir.listFiles();
            for (File file : files) {
                if (file.getName().endsWith(".mp3")) {
                    songs.add(file);
                }
            }
        }

        if (!songs.isEmpty()) {
            playSong();
        } else {
            songTitle.setText("No MP3 files found.");
        }
    }

    void playSong() {
        if (songs.isEmpty()) return;

        if (mediaPlayer != null) {
            mediaPlayer.release();
        }

        File song = songs.get(currentSongIndex);
        mediaPlayer = MediaPlayer.create(this, Uri.fromFile(song));
        songTitle.setText(song.getName());
        mediaPlayer.start();
    }

    void skipSong(int offset) {
        if (songs.isEmpty()) return;

        currentSongIndex = (currentSongIndex + offset + songs.size()) % songs.size();
        playSong();
    }

    @Override
    protected void onDestroy() {
        if (mediaPlayer != null) {
            mediaPlayer.release();
        }
        super.onDestroy();
    }
}
